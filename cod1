import geopandas as gpd
from shapely.geometry import Point
from pyproj import CRS, Transformer

# File paths
shapefile_path = '/mnt/c/Users/hp/Desktop/OSSG/GENERAL_ACQUISITION.shp'
filtered_csv_path = '/mnt/c/Users/hp/Desktop/OSSG/filtered.csv'
dataframe_csv_path = '/mnt/c/Users/hp/Desktop/OSSG/df.csv'

# UTM coordinates and projection details
utm_x, utm_y = 543946.149, 723063.687  # Example UTM coordinates
utm_zone = 31  # Example UTM Zone
northern_hemisphere = True  # False if the location is in the southern hemisphere
utm_epsg = 32600 + utm_zone if northern_hemisphere else 32700 + utm_zone  # EPSG code for UTM Zone
utm_crs = CRS.from_epsg(utm_epsg)

# Load the shapefile
try:
    gdf = gpd.read_file(shapefile_path)
    print("Shapefile loaded successfully.")
except Exception as e:
    print(f"Error loading shapefile: {e}")
    exit()

# Coordinate conversion: UTM to geographic (WGS84)
try:
    transformer = Transformer.from_crs(utm_crs, CRS.from_epsg(4326), always_xy=True)
    lon, lat = transformer.transform(utm_x, utm_y)
    print(f"Converted Coordinates: Longitude={lon}, Latitude={lat}")
except Exception as e:
    print(f"Error converting coordinates: {e}")
    exit()

# Ensure the GeoDataFrame CRS matches the UTM CRS
if gdf.crs is None:
    gdf.set_crs(utm_crs, inplace=True)
    print("CRS was undefined and has been set to UTM.")
elif gdf.crs.to_epsg() != utm_epsg:
    gdf = gdf.to_crs(utm_crs)
    print("CRS has been reprojected to match the UTM coordinates.")

# Create the target point in UTM coordinates
target_point = Point(utm_x, utm_y)

# Filter for geometries containing the target point
filtered_data = gdf[gdf.geometry.contains(target_point)]
if filtered_data.empty:
    print("No geometries contain the target point.")
else:
    print(f"Found {len(filtered_data)} geometries containing the target point.")

# Save the filtered GeoDataFrame to CSV
try:
    filtered_data.to_csv(filtered_csv_path, index=False)
    print(f"Filtered data saved to {filtered_csv_path}")
except Exception as e:
    print(f"Error saving filtered GeoDataFrame: {e}")

# Save the DataFrame (geometry dropped) to CSV
try:
    df = filtered_data.drop(columns='geometry')
    df.to_csv(dataframe_csv_path, index=False)
    print(f"Filtered data without geometry saved to {dataframe_csv_path}")
except Exception as e:
    print(f"Error saving DataFrame without geometry: {e}")
